{"version":3,"sources":["App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","disabled","props","messageClass","src","alt","App","useAuthState","user","ReactDOM","render","document","getElementById"],"mappings":"uQAaAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAiB3B,SAASC,IAKP,OACE,wBAAQC,UAAU,UAAUC,QALL,WACvB,IAAMC,EAAW,IAAId,IAASS,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAGrB,iCAMJ,SAASG,IAEP,OACER,EAAKS,aAAe,wBAAQL,QAAS,kBAAMJ,EAAKU,WAA5B,sBAIxB,SAASC,IAEP,IAAMC,EAAQC,mBAGRC,EAAcb,EAAUc,WAAW,YAEnCC,EAAQF,EAAYG,QAAQ,aAAaC,YAAY,IAPzC,EAWCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAXW,sBAagBC,mBAAS,IAbzB,mBAaXC,EAbW,KAaAC,EAbA,KAgBZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ5B,EAAKS,YAAvBoB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAMZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAW1C,IAASU,UAAUiC,WAAWC,kBACzCL,WACAD,QAVgB,OAclBL,EAAa,IAGbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAjBvB,2CAAH,sDAoBjB,OACE,qCACE,iCACGjB,GACCA,EAASkB,KAAI,SAACC,GAAD,OAAS,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAG9C,qBAAKC,IAAKhC,OAIZ,uBAAMiC,SAAUpB,EAAhB,UACE,uBACEqB,MAAOvB,EAEPwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,UAEzC,wBAAQG,KAAK,SAASC,UAAW3B,EAAjC,wBAQR,SAASkB,EAAYU,GAAQ,IAAD,EACMA,EAAMT,QAA9BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAIbsB,EAAevB,IAAQ7B,EAAKS,YAAYoB,IAAM,OAAS,WAE7D,OACE,sBAAK1B,UAAS,kBAAaiD,GAA3B,UACE,qBAAKC,IAAKvB,EAAUwB,IAAKzB,IACzB,4BAAIG,OAKKuB,MA9Gf,WAAe,MAEEC,YAAaxD,GAArByD,EAFM,oBAIb,OACE,sBAAKtD,UAAU,MAAf,UACE,iCACE,cAACK,EAAD,MAGF,kCAAUiD,EAAO,cAAC9C,EAAD,IAAe,cAACT,EAAD,UC/BtCwD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.75c6a306.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nimport { useRef, useState } from \"react\";\n\n//css\nimport \"./App.css\";\n\n//this object comes from creating your app in firebase\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDoVH0OF2F313oe9qCJCd5BshX9L5uFRF8\",\n  authDomain: \"mb13534-chat.firebaseapp.com\",\n  projectId: \"mb13534-chat\",\n  storageBucket: \"mb13534-chat.appspot.com\",\n  messagingSenderId: \"548678772873\",\n  appId: \"1:548678772873:web:dad7b9c873fcc5b3017e58\",\n  measurementId: \"G-CPCB6XERNW\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  //if user is signed in, user is an object, if not, user is null\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <SignOut />\n      </header>\n\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n  return (\n    <button className=\"sign-in\" onClick={signInWithGoogle}>\n      Sign in with Google\n    </button>\n  );\n}\n\nfunction SignOut() {\n  //check to see if there is a current user signed in, if there is, render a sign out button\n  return (\n    auth.currentUser && <button onClick={() => auth.signOut()}>Sign Out</button>\n  );\n}\n\nfunction ChatRoom() {\n  /* this reference will make it scroll to the bottom after you click send */\n  const dummy = useRef();\n\n  //reference a firestore collection\n  const messagesRef = firestore.collection(\"messages\");\n  //search for a subset of documents\n  const query = messagesRef.orderBy(\"createdAt\").limitToLast(25);\n  //actually make the query and listn for any updates\n  //this returns an array of objects, each object is the message in the database\n  //anytime the data changes, react will rerender with the current data\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n\n  const [formValue, setFormValue] = useState(\"\");\n\n  //update firestore when user submits message, prevent page from reloading\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    //get current users credentials\n    const { uid, photoURL } = auth.currentUser;\n\n    //create new document in firestore, takes JS object as argument\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      photoURL,\n      uid,\n    });\n\n    //set formValue back to empty string\n    setFormValue(\"\");\n\n    //reference is at the bottom of the page, scroll to that reference\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n        {/* this reference will make it scroll to the bottom after you click send */}\n        <div ref={dummy}></div>\n      </main>\n\n      {/* on submit writes value to firestore */}\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          //bind state to form inputr\n          onChange={(e) => setFormValue(e.target.value)}\n        />\n        <button type=\"submit\" disabled={!formValue}>\n          Send\n        </button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  //check to see if the uid from the message is the user that is logged in\n  //if it is, messageClass = 'sent', else 'received'\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} alt={uid} />\n      <p>{text}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}